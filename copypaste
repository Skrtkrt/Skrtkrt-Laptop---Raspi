<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maps - Larva Tracker</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 40px;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: white;
            z-index: 100;
        }

        .logo {
            width: 80px;
            height: auto;
            cursor: pointer;
            animation: logoSway 2s infinite ease-in-out;
        }

        .logo:hover {
            animation: logoWiggle 0.5s infinite;
        }

        @keyframes logoSway {
            0% { transform: rotate(-5deg); }
            50% { transform: rotate(5deg); }
            100% { transform: rotate(-5deg); }
        }

        @keyframes logoWiggle {
            0% { transform: rotate(-8deg); }
            25% { transform: rotate(8deg); }
            50% { transform: rotate(-8deg); }
            75% { transform: rotate(8deg); }
            100% { transform: rotate(-8deg); }
        }

        .nav-menu {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .nav-menu a {
            text-decoration: none;
            color: #666;
            font-size: 18px;
        }

        .nav-menu a.active {
            color: black;
            font-weight: bold;
        }

        .nav-menu span {
            color: #666;
        }

        .content-wrapper {
            display: flex;
            height: calc(100vh - 120px); /* header height */
            margin-top: 120px;
            min-height: 0;
        }

        .sidebar {
            width: 300px;
            min-width: 220px;
            max-width: 350px;
            padding: 20px;
            background: white;
            overflow-y: auto;
        }

        .point-markers {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .point {
            display: flex;
            align-items: center;
            padding: 10px 20px;
            border: none;
            color: black;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            position: relative;
            clip-path: polygon(0 0, 85% 0, 100% 50%, 85% 100%, 0 100%);
            width: 200px;
        }

        .point-a { background-color: #FF9966; }
        .point-b { background-color: #66CCFF; }
        .point-c { background-color: #FF66B2; }
        .point-d { background-color: #99FF66; }

        .pattern-controls {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f8f8;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .pattern-button {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: none;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .pattern-button:hover {
            background-color: #45a049;
        }

        .pattern-button.active {
            background-color: #2196F3;
        }

        .point-info {
            margin-top: 10px;
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
            font-size: 14px;
        }

        .circle-info {
            margin-top: 5px;
            color: #666;
        }

        .docking-controls {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f8f8;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .docking-button {
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #2196F3;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
            width: 100%;
            margin-top: 10px;
        }

        .docking-button:hover {
            background-color: #1976D2;
        }

        .docking-button.returning {
            background-color: #FF9800;
        }

        #map {
            flex: 1 1 auto;
            height: 100vh;
            min-height: 0;
        }

        .gps-info {
            position: absolute;
            top: 140px;
            right: 40px;
            background: rgba(255,255,255,0.95);
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 12px 18px;
            font-size: 16px;
            z-index: 2000;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        @media (max-width: 900px) {
            .content-wrapper { flex-direction: column; }
            .sidebar { width: 100%; max-width: none; }
            #map { height: 60vh; }
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="{{ url_for('static', filename='images/larva logo.png') }}" alt="Logo" class="logo" onclick="window.location.href='/main'">
        <nav class="nav-menu">
            <a href="/main">HOME</a>
            <span>|</span>
            <a href="/maps" class="active">MAPS</a>
            <span>|</span>
            <a href="/schedules">SCHEDULES</a>
            <span>|</span>
            <a href="/notifications">NOTIFICATION</a>
            <span>|</span>
            <a href="/error-logs">ERROR LOGS</a>
        </nav>
    </div>

    <div class="content-wrapper">
        <div class="sidebar">
            <div class="point-markers">
                <button class="point point-a" onclick="enterPointSettingMode('A')">Point A</button>
                <button class="point point-b" onclick="enterPointSettingMode('B')">Point B</button>
                <button class="point point-c" onclick="enterPointSettingMode('C')">Point C</button>
                <button class="point point-d" onclick="enterPointSettingMode('D')">Point D</button>
            </div>

            <div class="pattern-controls">
                <h3>Pattern Selection</h3>
                <div class="point-info">
                    <div class="circle-info">Circle Radius: 15 meters</div>
                    <div id="pattern-status">No pattern selected</div>
                </div>
            </div>

            <div class="docking-controls">
                <h3>Docking Station</h3>
                <button class="docking-button" id="setDockingBtn">Set Docking Station</button>
                <button class="docking-button" id="returnDockBtn" style="margin-top:10px;background:#FF9800;">Return to Dock</button>
                <div id="dockingStatus" style="margin-top:10px;font-weight:bold;">Docking Status: <span id="dockingStatusValue">Unknown</span></div>
            </div>
            <div class="custom-point-controls">
                <button class="docking-button" id="addCustomPointBtn">Add Custom Point</button>
            </div>
        </div>
        <div id="map"></div>
        <div id="gpsInfo" class="gps-info">No GPS data</div>
    </div>

    <script src="{{ url_for('static', filename='js/map.js') }}"></script>

    <script>
        let currentPoint = null;
        let mapInstance = null;
        let robotMarker = null;
        let scheduleMarkers = [];
        let scheduleCircles = [];
        let setDockingMode = false;
        let allMarkers = [];
        let pointMarkers = {};
        let addCustomPointMode = false;
        let customMarkers = [];
        let pointSettingMode = false;
        let pointToSet = null;
        let pointSettingMessage = null;
        let cancelPointBtn = null;

        // Point colors for consistency
        const pointColors = {
            'A': '#FF9966',
            'B': '#66CCFF',
            'C': '#FF66B2',
            'D': '#99FF66'
        };

        // Pampanga bounds
        const pampangaBounds = L.latLngBounds(
            L.latLng(14.80, 120.35), // Southwest
            L.latLng(15.25, 120.95)  // Northeast
        );

        // Map layers (add your local tile server URLs when ready)
        const streetLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        });
        const satelliteLayer = L.tileLayer('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
            maxZoom: 19,
            subdomains:['mt0','mt1','mt2','mt3'],
            attribution: '© Google'
        });
        // Add more layers as needed

        // Initialize map
        const map = L.map('map', {
            center: [15.0409, 120.6668], // Pampanga center
            zoom: 11,
            maxBounds: pampangaBounds,
            layers: [streetLayer]
        });
        L.control.layers({
            'Street': streetLayer,
            'Satellite': satelliteLayer
        }).addTo(map);

        function enterPointSettingMode(point) {
            pointSettingMode = true;
            pointToSet = point;
            map.getContainer().style.cursor = 'crosshair';
            map.dragging.disable();
            map.scrollWheelZoom.disable();
            // Show on-screen message
            if (!pointSettingMessage) {
                pointSettingMessage = document.createElement('div');
                pointSettingMessage.id = 'pointSettingMessage';
                pointSettingMessage.style.position = 'fixed';
                pointSettingMessage.style.top = '80px';
                pointSettingMessage.style.left = '50%';
                pointSettingMessage.style.transform = 'translateX(-50%)';
                pointSettingMessage.style.background = '#2196F3';
                pointSettingMessage.style.color = 'white';
                pointSettingMessage.style.padding = '12px 32px';
                pointSettingMessage.style.borderRadius = '8px';
                pointSettingMessage.style.fontSize = '18px';
                pointSettingMessage.style.zIndex = 2000;
                document.body.appendChild(pointSettingMessage);
            }
            pointSettingMessage.textContent = `Click on the map to set Point ${point}`;
            pointSettingMessage.style.display = 'block';
            // Add Cancel button
            if (!cancelPointBtn) {
                cancelPointBtn = document.createElement('button');
                cancelPointBtn.textContent = 'Cancel';
                cancelPointBtn.style.marginLeft = '16px';
                cancelPointBtn.style.background = '#f44336';
                cancelPointBtn.style.color = 'white';
                cancelPointBtn.style.border = 'none';
                cancelPointBtn.style.padding = '8px 20px';
                cancelPointBtn.style.borderRadius = '6px';
                cancelPointBtn.style.fontSize = '16px';
                cancelPointBtn.style.cursor = 'pointer';
                cancelPointBtn.onclick = exitPointSettingMode;
                pointSettingMessage.appendChild(cancelPointBtn);
            } else {
                pointSettingMessage.appendChild(cancelPointBtn);
            }
        }

        function exitPointSettingMode() {
            pointSettingMode = false;
            pointToSet = null;
            map.getContainer().style.cursor = '';
            map.dragging.enable();
            map.scrollWheelZoom.enable();
            if (pointSettingMessage) pointSettingMessage.style.display = 'none';
        }

        // Update point button click handlers to use new mode
        // Example: document.querySelector('.point-a').onclick = () => enterPointSettingMode('A');
        document.querySelectorAll('.point').forEach(btn => {
            btn.onclick = function() {
                const point = btn.textContent.trim().split(' ')[1];
                enterPointSettingMode(point);
            };
        });

        // Handle map clicks
        document.getElementById('setDockingBtn').onclick = function() {
            setDockingMode = true;
            map.getContainer().style.cursor = 'crosshair';
        };
        map.on('click', function(e) {
            if (setDockingMode) {
                mapInstance.setDockingStation(e.latlng);
                setDockingMode = false;
                map.getContainer().style.cursor = '';
            } else if (pointSettingMode && pointToSet) {
                handlePointSelection(pointToSet, e.latlng);
                exitPointSettingMode();
            } else if (addCustomPointMode) {
                const note = prompt('Enter a note for this point:');
                if (note !== null) {
                    const marker = L.marker(e.latlng, { draggable: true }).addTo(map);
                    marker.bindPopup(`<b>Custom Point</b><br>${note}`);
                    customMarkers.push(marker);
                    marker.on('contextmenu', function(ev) {
                        showMarkerContextMenu(marker, ev.latlng, true);
                    });
                }
                addCustomPointMode = false;
                document.getElementById('addCustomPointBtn').textContent = 'Add Custom Point';
                map.getContainer().style.cursor = '';
            } else {
                // If not in docking mode and not selecting a point, send move command
                fetch('/move_rover', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ lat: e.latlng.lat, lng: e.latlng.lng })
                }).then(res => res.json()).then(data => {
                    alert('Rover moving to: ' + data.lat + ', ' + data.lng);
                });
            }
        });

        // Simulate status updates (for testing)
        let batteryLevel = 100;
        let waterLevel = 100;

        // On initial load, show 'No GPS data'
        document.getElementById('gpsInfo').textContent = 'No GPS data';

        // Function to clear all schedule markers/circles
        function clearScheduleMarkers() {
            scheduleMarkers.forEach(m => map.removeLayer(m));
            scheduleMarkers = [];
            scheduleCircles.forEach(c => map.removeLayer(c));
            scheduleCircles = [];
        }

        // When adding markers for A/B/C/D, store them in pointMarkers
        function addPointMarker(point, lat, lng) {
            const color = pointColors[point] || '#2196F3';
            const marker = L.marker([lat, lng], {title: `Point ${point}`}).addTo(map);
            marker.bindPopup(`<b>Point ${point}</b>`);
            pointMarkers[point] = marker;
            allMarkers.push(marker);
            marker.on('contextmenu', function(ev) {
                showMarkerContextMenu(marker, ev.latlng);
            });
        }

        let gpsMarker = null;

        function updateGPSOnMap() {
            fetch('/api/gps')
                .then(res => res.json())
                .then(gps => {
                    if (gps && gps.lat && gps.lng) {
                        if (!gpsMarker) {
                            gpsMarker = L.marker([gps.lat, gps.lng]).addTo(map);
                        } else {
                            gpsMarker.setLatLng([gps.lat, gps.lng]);
                        }
                        map.setView([gps.lat, gps.lng]);
                        document.getElementById('gpsInfo').textContent =
                            `Current Location: ${gps.lat.toFixed(6)}, ${gps.lng.toFixed(6)}`;
                    } else {
                        document.getElementById('gpsInfo').textContent = 'No GPS data';
                    }
                })
                .catch(() => {
                    document.getElementById('gpsInfo').textContent = 'Error fetching GPS data';
                });
        }
        setInterval(updateGPSOnMap, 1000);
        updateGPSOnMap();

        // Double-click to zoom to marker
        document.querySelectorAll('.point').forEach(btn => {
            btn.addEventListener('dblclick', function() {
                const point = btn.textContent.trim().split(' ')[1];
                if (pointMarkers[point]) {
                    map.setView(pointMarkers[point].getLatLng(), 17, {animate: true});
                    pointMarkers[point].openPopup();
                }
            });
        });

        function showDockingStation() {
            fetch('/get_docking_station')
                .then(res => res.json())
                .then(data => {
                    console.log('Docking station data:', data);
                    if (data.lat && data.lng) {
                        const houseIcon = L.icon({
                            iconUrl: '/static/images/house.png',
                            iconSize: [36, 36],
                            iconAnchor: [18, 36],
                            popupAnchor: [0, -36]
                        });
                        const marker = L.marker([data.lat, data.lng], { icon: houseIcon })
                            .addTo(map)
                            .bindPopup('Docking Station');
                        allMarkers.push(marker);
                    } else {
                        console.log('No docking station set.');
                    }
                })
                .catch(err => console.error('Error fetching docking station:', err));
        }

        function showAllScheduledPointsAndFit() {
            clearScheduleMarkers();
            allMarkers = [];
            fetch('/get_schedules')
                .then(res => res.json())
                .then(schedules => {
                    console.log('Schedules data:', schedules);
                    schedules.forEach(sch => {
                        if (sch.location && sch.point) {
                            addPointMarker(sch.point, sch.location.lat, sch.location.lng);
                            // Circle
                            if (sch.radius) {
                                const circle = L.circle([sch.location.lat, sch.location.lng], {
                                    radius: Math.min(sch.radius, 20),
                                    color: pointColors[sch.point] || '#2196F3',
                                    fillColor: pointColors[sch.point] || '#2196F3',
                                    fillOpacity: 0.15,
                                    weight: 2
                                }).addTo(map);
                                scheduleCircles.push(circle);
                            }
                        }
                    });
                    // After all markers are added, fit map to bounds
                    if (allMarkers.length > 0) {
                        const group = L.featureGroup(allMarkers);
                        map.fitBounds(group.getBounds().pad(0.2));
                    } else {
                        console.log('No scheduled points to show.');
                    }
                })
                .catch(err => console.error('Error fetching schedules:', err));
            showDockingStation();
        }

        // Replace showAllScheduledPoints with the new function
        showAllScheduledPointsAndFit();

        document.getElementById('addCustomPointBtn').onclick = function() {
            addCustomPointMode = !addCustomPointMode;
            this.textContent = addCustomPointMode ? 'Cancel Add Point' : 'Add Custom Point';
            if (addCustomPointMode) {
                map.getContainer().style.cursor = 'crosshair';
            } else {
                map.getContainer().style.cursor = '';
            }
        };

        function showMarkerContextMenu(marker, latlng, isCustom = false) {
            const menu = document.createElement('div');
            menu.style.position = 'absolute';
            menu.style.left = event.clientX + 'px';
            menu.style.top = event.clientY + 'px';
            menu.style.background = '#fff';
            menu.style.border = '1px solid #ccc';
            menu.style.padding = '8px';
            menu.style.zIndex = 3000;
            menu.style.boxShadow = '0 2px 8px rgba(0,0,0,0.15)';
            menu.innerHTML = `<button id="editMarkerBtn">Edit</button> <button id="deleteMarkerBtn">Delete</button>`;
            document.body.appendChild(menu);

            menu.querySelector('#editMarkerBtn').onclick = function() {
                const newNote = prompt('Edit note:', marker.getPopup().getContent().replace(/<[^>]+>/g, ''));
                if (newNote !== null) {
                    marker.setPopupContent(`<b>${isCustom ? 'Custom Point' : 'Point'}</b><br>${newNote}`);
                }
                document.body.removeChild(menu);
            };
            menu.querySelector('#deleteMarkerBtn').onclick = function() {
                map.removeLayer(marker);
                document.body.removeChild(menu);
            };
            document.addEventListener('click', function handler() {
                if (document.body.contains(menu)) document.body.removeChild(menu);
                document.removeEventListener('click', handler);
            });
        }

        // Mission status colors
        const statusColors = {
            'visited': '#4CAF50',      // green
            'in_progress': '#FFEB3B', // yellow
            'pending': '#F44336'      // red
        };
        let missionStatus = {};

        // Fetch mission status and update marker colors/status
        function updateMissionStatus() {
            fetch('/api/mission_status')
                .then(res => res.json())
                .then(status => {
                    missionStatus = status;
                    // Update docking status
                    document.getElementById('dockingStatusValue').textContent =
                        status.docking ? status.docking.replace('_', ' ').toUpperCase() : 'Unknown';
                    // Update marker colors
                    Object.keys(pointMarkers).forEach(pt => {
                        if (status[pt] && pointMarkers[pt]) {
                            const icon = L.divIcon({
                                className: '',
                                html: `<div style="background:${statusColors[status[pt]]||'#2196F3'};width:24px;height:24px;border-radius:50%;border:2px solid #333;"></div>`,
                                iconSize: [24,24],
                                iconAnchor: [12,24]
                            });
                            pointMarkers[pt].setIcon(icon);
                        }
                    });
                });
        }
        setInterval(updateMissionStatus, 2000);
        updateMissionStatus();

        // Return to Dock button logic
        document.getElementById('returnDockBtn').onclick = function() {
            // TODO: Implement backend endpoint for actual rover command
            document.getElementById('dockingStatusValue').textContent = 'EN ROUTE';
            this.disabled = true;
            setTimeout(() => { this.disabled = false; }, 5000); // Re-enable after 5s for demo
            // Optionally, send fetch('/api/return_to_dock', {method:'POST'})
        };
    </script>
</body>
</html> 
