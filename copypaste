import time
import busio
from board import SCL, SDA
from adafruit_pca9685 import PCA9685
from adafruit_tca9548a import TCA9548A
import threading

# Setup I2C and TCA9548A multiplexer
_i2c = busio.I2C(SCL, SDA)
_tca = TCA9548A(_i2c)
_pca_i2c = _tca[0]  # PCA9685 on channel 0
_pca = PCA9685(_pca_i2c)
_pca.frequency = 50  # Standard for servos

# Servo configuration
servo_config = {
    9: {"min": 90, "max": 180, "init": 180, "delay": 0.04},
    10: {"min": 0, "max": 100, "init": 90, "delay": 0.08}
}

# Current positions
current_angles = {
    9: servo_config[9]["init"],
    10: servo_config[10]["init"]
}

# Object positions
object_positions = {
    "A": {9: 120, 10: 30},
    "B": {9: 100, 10: 75},
    "C": {9: 120, 10: 30},
    "D": {9: 100, 10: 75}
}

# Straight position
straight_position = {
    9: 90,
    10: 0
}

# Lock for thread safety
_servo_lock = threading.Lock()

# Convert angle to PWM signal
def angle_to_pwm(angle):
    pulse = 500 + (angle / 180) * 2000  # in microseconds
    duty_cycle = int((pulse / 20000) * 65535)
    return duty_cycle

# Move servo slowly
def smooth_move(channel, current, target, delay):
    step = 1 if target > current else -1
    for angle in range(current, target + step, step):
        _pca.channels[channel].duty_cycle = angle_to_pwm(angle)
        time.sleep(delay)
    return target

# Threaded move
def threaded_servo_move(channel, target_angle, delay):
    global current_angles
    with _servo_lock:
        current = current_angles[channel]
        current_angles[channel] = smooth_move(channel, current, target_angle, delay)

def move_both_channels(targets):
    threads = []
    for ch in targets:
        thread = threading.Thread(target=threaded_servo_move, args=(ch, targets[ch], servo_config[ch]["delay"]))
        threads.append(thread)
        thread.start()
    for thread in threads:
        thread.join()

def initialize_servos():
    move_both_channels({9: servo_config[9]["init"], 10: servo_config[10]["init"]})

def move_to_object(obj_label):
    if obj_label not in object_positions:
        raise ValueError(f"Invalid object label: {obj_label}")
    # Move to straight position first
    move_both_channels(straight_position)
    # Move to object position
    move_both_channels(object_positions[obj_label])

def move_to_straight():
    move_both_channels(straight_position)

def move_to_rest():
    move_both_channels({9: servo_config[9]["init"], 10: servo_config[10]["init"]}) 
